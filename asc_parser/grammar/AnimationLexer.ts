// Generated from ./asc_parser/grammar/Animation.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class AnimationLexer extends Lexer {
	public static readonly ID = 1;
	public static readonly INT = 2;
	public static readonly FloatLiteral = 3;
	public static readonly STRING = 4;
	public static readonly Digit = 5;
	public static readonly PointFloat = 6;
	public static readonly ExponentFloat = 7;
	public static readonly Exponent = 8;
	public static readonly INT_FLOAT_SEQUENCE = 9;
	public static readonly ASTERISK = 10;
	public static readonly WS = 11;
	public static readonly OPEN_BRACE = 12;
	public static readonly CLOSE_BRACE = 13;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"ID", "Char", "NextChar", "Letter", "DIGIT", "INT", "FloatLiteral", "STRING", 
		"Digit", "PointFloat", "ExponentFloat", "Exponent", "INT_FLOAT_SEQUENCE", 
		"ASTERISK", "WS", "OPEN_BRACE", "CLOSE_BRACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "'*'", undefined, "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ID", "INT", "FloatLiteral", "STRING", "Digit", "PointFloat", 
		"ExponentFloat", "Exponent", "INT_FLOAT_SEQUENCE", "ASTERISK", "WS", "OPEN_BRACE", 
		"CLOSE_BRACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(AnimationLexer._LITERAL_NAMES, AnimationLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return AnimationLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(AnimationLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Animation.g4"; }

	// @Override
	public get ruleNames(): string[] { return AnimationLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return AnimationLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return AnimationLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return AnimationLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0F\x9E\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x03\x02\x05\x02\'\n\x02\x03\x02\x03\x02\x07\x02+\n\x02\f\x02\x0E" +
		"\x02.\v\x02\x03\x03\x03\x03\x03\x04\x03\x04\x05\x044\n\x04\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x07\x05\x07;\n\x07\x03\x07\x06\x07>\n\x07\r\x07" +
		"\x0E\x07?\x03\b\x03\b\x05\bD\n\b\x03\t\x03\t\x03\t\x03\t\x03\t\x05\tK" +
		"\n\t\x07\tM\n\t\f\t\x0E\tP\v\t\x03\t\x03\t\x03\n\x03\n\x03\v\x05\vW\n" +
		"\v\x03\v\x07\vZ\n\v\f\v\x0E\v]\v\v\x03\v\x03\v\x06\va\n\v\r\v\x0E\vb\x03" +
		"\v\x06\vf\n\v\r\v\x0E\vg\x03\v\x03\v\x05\vl\n\v\x03\f\x05\fo\n\f\x03\f" +
		"\x06\fr\n\f\r\f\x0E\fs\x03\f\x05\fw\n\f\x03\f\x03\f\x03\r\x03\r\x05\r" +
		"}\n\r\x03\r\x06\r\x80\n\r\r\r\x0E\r\x81\x03\x0E\x03\x0E\x05\x0E\x86\n" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\x8B\n\x0E\x07\x0E\x8D\n\x0E\f\x0E" +
		"\x0E\x0E\x90\v\x0E\x03\x0F\x03\x0F\x03\x10\x06\x10\x95\n\x10\r\x10\x0E" +
		"\x10\x96\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x02\x02\x02\x13" +
		"\x03\x02\x03\x05\x02\x02\x07\x02\x02\t\x02\x02\v\x02\x02\r\x02\x04\x0F" +
		"\x02\x05\x11\x02\x06\x13\x02\x07\x15\x02\b\x17\x02\t\x19\x02\n\x1B\x02" +
		"\v\x1D\x02\f\x1F\x02\r!\x02\x0E#\x02\x0F\x03\x02\b\x04\x02C\\c|\x03\x02" +
		"2;\x04\x02--//\x06\x02\f\f\x0F\x0F$$^^\x04\x02GGgg\x05\x02\v\f\x0F\x0F" +
		"\"\"\x02\xB0\x02\x03\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03" +
		"\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03" +
		"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03" +
		"\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03" +
		"\x02\x02\x02\x02#\x03\x02\x02\x02\x03&\x03\x02\x02\x02\x05/\x03\x02\x02" +
		"\x02\x073\x03\x02\x02\x02\t5\x03\x02\x02\x02\v7\x03\x02\x02\x02\r:\x03" +
		"\x02\x02\x02\x0FC\x03\x02\x02\x02\x11E\x03\x02\x02\x02\x13S\x03\x02\x02" +
		"\x02\x15k\x03\x02\x02\x02\x17n\x03\x02\x02\x02\x19z\x03\x02\x02\x02\x1B" +
		"\x85\x03\x02\x02\x02\x1D\x91\x03\x02\x02\x02\x1F\x94\x03\x02\x02\x02!" +
		"\x9A\x03\x02\x02\x02#\x9C\x03\x02\x02\x02%\'\x05\v\x06\x02&%\x03\x02\x02" +
		"\x02&\'\x03\x02\x02\x02\'(\x03\x02\x02\x02(,\x05\x05\x03\x02)+\x05\x07" +
		"\x04\x02*)\x03\x02\x02\x02+.\x03\x02\x02\x02,*\x03\x02\x02\x02,-\x03\x02" +
		"\x02\x02-\x04\x03\x02\x02\x02.,\x03\x02\x02\x02/0\x05\t\x05\x020\x06\x03" +
		"\x02\x02\x0214\x05\t\x05\x0224\x07a\x02\x0231\x03\x02\x02\x0232\x03\x02" +
		"\x02\x024\b\x03\x02\x02\x0256\t\x02\x02\x026\n\x03\x02\x02\x0278\t\x03" +
		"\x02\x028\f\x03\x02\x02\x029;\t\x04\x02\x02:9\x03\x02\x02\x02:;\x03\x02" +
		"\x02\x02;=\x03\x02\x02\x02<>\x05\v\x06\x02=<\x03\x02\x02\x02>?\x03\x02" +
		"\x02\x02?=\x03\x02\x02\x02?@\x03\x02\x02\x02@\x0E\x03\x02\x02\x02AD\x05" +
		"\x15\v\x02BD\x05\x17\f\x02CA\x03\x02\x02\x02CB\x03\x02\x02\x02D\x10\x03" +
		"\x02\x02\x02EN\x07$\x02\x02FM\n\x05\x02\x02GJ\x07^\x02\x02HK\v\x02\x02" +
		"\x02IK\x07\x02\x02\x03JH\x03\x02\x02\x02JI\x03\x02\x02\x02KM\x03\x02\x02" +
		"\x02LF\x03\x02\x02\x02LG\x03\x02\x02\x02MP\x03\x02\x02\x02NL\x03\x02\x02" +
		"\x02NO\x03\x02\x02\x02OQ\x03\x02\x02\x02PN\x03\x02\x02\x02QR\x07$\x02" +
		"\x02R\x12\x03\x02\x02\x02ST\t\x03\x02\x02T\x14\x03\x02\x02\x02UW\t\x04" +
		"\x02\x02VU\x03\x02\x02\x02VW\x03\x02\x02\x02W[\x03\x02\x02\x02XZ\x05\x13" +
		"\n\x02YX\x03\x02\x02\x02Z]\x03\x02\x02\x02[Y\x03\x02\x02\x02[\\\x03\x02" +
		"\x02\x02\\^\x03\x02\x02\x02][\x03\x02\x02\x02^`\x070\x02\x02_a\x05\x13" +
		"\n\x02`_\x03\x02\x02\x02ab\x03\x02\x02\x02b`\x03\x02\x02\x02bc\x03\x02" +
		"\x02\x02cl\x03\x02\x02\x02df\x05\x13\n\x02ed\x03\x02\x02\x02fg\x03\x02" +
		"\x02\x02ge\x03\x02\x02\x02gh\x03\x02\x02\x02hi\x03\x02\x02\x02ij\x070" +
		"\x02\x02jl\x03\x02\x02\x02kV\x03\x02\x02\x02ke\x03\x02\x02\x02l\x16\x03" +
		"\x02\x02\x02mo\t\x04\x02\x02nm\x03\x02\x02\x02no\x03\x02\x02\x02ov\x03" +
		"\x02\x02\x02pr\x05\x13\n\x02qp\x03\x02\x02\x02rs\x03\x02\x02\x02sq\x03" +
		"\x02\x02\x02st\x03\x02\x02\x02tw\x03\x02\x02\x02uw\x05\x15\v\x02vq\x03" +
		"\x02\x02\x02vu\x03\x02\x02\x02wx\x03\x02\x02\x02xy\x05\x19\r\x02y\x18" +
		"\x03\x02\x02\x02z|\t\x06\x02\x02{}\t\x04\x02\x02|{\x03\x02\x02\x02|}\x03" +
		"\x02\x02\x02}\x7F\x03\x02\x02\x02~\x80\x05\x13\n\x02\x7F~\x03\x02\x02" +
		"\x02\x80\x81\x03\x02\x02\x02\x81\x7F\x03\x02\x02\x02\x81\x82\x03\x02\x02" +
		"\x02\x82\x1A\x03\x02\x02\x02\x83\x86\x05\r\x07\x02\x84\x86\x05\x0F\b\x02" +
		"\x85\x83\x03\x02\x02\x02\x85\x84\x03\x02\x02\x02\x86\x8E\x03\x02\x02\x02" +
		"\x87\x8A\x05\x1F\x10\x02\x88\x8B\x05\r\x07\x02\x89\x8B\x05\x0F\b\x02\x8A" +
		"\x88\x03\x02\x02\x02\x8A\x89\x03\x02\x02\x02\x8B\x8D\x03\x02\x02\x02\x8C" +
		"\x87\x03\x02\x02\x02\x8D\x90\x03\x02\x02\x02\x8E\x8C\x03\x02\x02\x02\x8E" +
		"\x8F\x03\x02\x02\x02\x8F\x1C\x03\x02\x02\x02\x90\x8E\x03\x02\x02\x02\x91" +
		"\x92\x07,\x02\x02\x92\x1E\x03\x02\x02\x02\x93\x95\t\x07\x02\x02\x94\x93" +
		"\x03\x02\x02\x02\x95\x96\x03\x02\x02\x02\x96\x94\x03\x02\x02\x02\x96\x97" +
		"\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98\x99\b\x10\x02\x02\x99 \x03" +
		"\x02\x02\x02\x9A\x9B\x07}\x02\x02\x9B\"\x03\x02\x02\x02\x9C\x9D\x07\x7F" +
		"\x02\x02\x9D$\x03\x02\x02\x02\x1A\x02&,3:?CJLNV[bgknsv|\x81\x85\x8A\x8E" +
		"\x96\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!AnimationLexer.__ATN) {
			AnimationLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(AnimationLexer._serializedATN));
		}

		return AnimationLexer.__ATN;
	}

}

