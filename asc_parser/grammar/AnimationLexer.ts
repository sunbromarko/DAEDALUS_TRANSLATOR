// Generated from ./asc_parser/grammar/Animation.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class AnimationLexer extends Lexer {
	public static readonly ID = 1;
	public static readonly INT = 2;
	public static readonly FloatLiteral = 3;
	public static readonly STRING = 4;
	public static readonly Digit = 5;
	public static readonly PointFloat = 6;
	public static readonly ExponentFloat = 7;
	public static readonly Exponent = 8;
	public static readonly INT_FLOAT_SEQUENCE = 9;
	public static readonly ASTERISK = 10;
	public static readonly WS = 11;
	public static readonly Newline = 12;
	public static readonly OPEN_BRACE = 13;
	public static readonly CLOSE_BRACE = 14;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"ID", "Char", "NextChar", "Letter", "DIGIT", "INT", "FloatLiteral", "STRING", 
		"Digit", "PointFloat", "ExponentFloat", "Exponent", "INT_FLOAT_SEQUENCE", 
		"ASTERISK", "WS", "Newline", "OPEN_BRACE", "CLOSE_BRACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "'*'", undefined, undefined, "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ID", "INT", "FloatLiteral", "STRING", "Digit", "PointFloat", 
		"ExponentFloat", "Exponent", "INT_FLOAT_SEQUENCE", "ASTERISK", "WS", "Newline", 
		"OPEN_BRACE", "CLOSE_BRACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(AnimationLexer._LITERAL_NAMES, AnimationLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return AnimationLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(AnimationLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Animation.g4"; }

	// @Override
	public get ruleNames(): string[] { return AnimationLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return AnimationLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return AnimationLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return AnimationLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x10\xA9\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x03\x02\x05\x02)\n\x02\x03\x02\x03\x02\x07\x02-\n\x02" +
		"\f\x02\x0E\x020\v\x02\x03\x03\x03\x03\x03\x04\x03\x04\x05\x046\n\x04\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x07\x05\x07=\n\x07\x03\x07\x06\x07@\n" +
		"\x07\r\x07\x0E\x07A\x03\b\x03\b\x05\bF\n\b\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x05\tM\n\t\x07\tO\n\t\f\t\x0E\tR\v\t\x03\t\x03\t\x03\n\x03\n\x03\v" +
		"\x05\vY\n\v\x03\v\x07\v\\\n\v\f\v\x0E\v_\v\v\x03\v\x03\v\x06\vc\n\v\r" +
		"\v\x0E\vd\x03\v\x06\vh\n\v\r\v\x0E\vi\x03\v\x03\v\x05\vn\n\v\x03\f\x05" +
		"\fq\n\f\x03\f\x06\ft\n\f\r\f\x0E\fu\x03\f\x05\fy\n\f\x03\f\x03\f\x03\r" +
		"\x03\r\x05\r\x7F\n\r\x03\r\x06\r\x82\n\r\r\r\x0E\r\x83\x03\x0E\x03\x0E" +
		"\x05\x0E\x88\n\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\x8D\n\x0E\x07\x0E\x8F" +
		"\n\x0E\f\x0E\x0E\x0E\x92\v\x0E\x03\x0F\x03\x0F\x03\x10\x06\x10\x97\n\x10" +
		"\r\x10\x0E\x10\x98\x03\x10\x03\x10\x03\x11\x03\x11\x05\x11\x9F\n\x11\x03" +
		"\x11\x05\x11\xA2\n\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13" +
		"\x02\x02\x02\x14\x03\x02\x03\x05\x02\x02\x07\x02\x02\t\x02\x02\v\x02\x02" +
		"\r\x02\x04\x0F\x02\x05\x11\x02\x06\x13\x02\x07\x15\x02\b\x17\x02\t\x19" +
		"\x02\n\x1B\x02\v\x1D\x02\f\x1F\x02\r!\x02\x0E#\x02\x0F%\x02\x10\x03\x02" +
		"\b\x04\x02C\\c|\x03\x022;\x04\x02--//\x06\x02\f\f\x0F\x0F$$^^\x04\x02" +
		"GGgg\x04\x02\v\v\"\"\x02\xBD\x02\x03\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x03" +
		"(\x03\x02\x02\x02\x051\x03\x02\x02\x02\x075\x03\x02\x02\x02\t7\x03\x02" +
		"\x02\x02\v9\x03\x02\x02\x02\r<\x03\x02\x02\x02\x0FE\x03\x02\x02\x02\x11" +
		"G\x03\x02\x02\x02\x13U\x03\x02\x02\x02\x15m\x03\x02\x02\x02\x17p\x03\x02" +
		"\x02\x02\x19|\x03\x02\x02\x02\x1B\x87\x03\x02\x02\x02\x1D\x93\x03\x02" +
		"\x02\x02\x1F\x96\x03\x02\x02\x02!\xA1\x03\x02\x02\x02#\xA5\x03\x02\x02" +
		"\x02%\xA7\x03\x02\x02\x02\')\x05\v\x06\x02(\'\x03\x02\x02\x02()\x03\x02" +
		"\x02\x02)*\x03\x02\x02\x02*.\x05\x05\x03\x02+-\x05\x07\x04\x02,+\x03\x02" +
		"\x02\x02-0\x03\x02\x02\x02.,\x03\x02\x02\x02./\x03\x02\x02\x02/\x04\x03" +
		"\x02\x02\x020.\x03\x02\x02\x0212\x05\t\x05\x022\x06\x03\x02\x02\x0236" +
		"\x05\t\x05\x0246\x07a\x02\x0253\x03\x02\x02\x0254\x03\x02\x02\x026\b\x03" +
		"\x02\x02\x0278\t\x02\x02\x028\n\x03\x02\x02\x029:\t\x03\x02\x02:\f\x03" +
		"\x02\x02\x02;=\t\x04\x02\x02<;\x03\x02\x02\x02<=\x03\x02\x02\x02=?\x03" +
		"\x02\x02\x02>@\x05\v\x06\x02?>\x03\x02\x02\x02@A\x03\x02\x02\x02A?\x03" +
		"\x02\x02\x02AB\x03\x02\x02\x02B\x0E\x03\x02\x02\x02CF\x05\x15\v\x02DF" +
		"\x05\x17\f\x02EC\x03\x02\x02\x02ED\x03\x02\x02\x02F\x10\x03\x02\x02\x02" +
		"GP\x07$\x02\x02HO\n\x05\x02\x02IL\x07^\x02\x02JM\v\x02\x02\x02KM\x07\x02" +
		"\x02\x03LJ\x03\x02\x02\x02LK\x03\x02\x02\x02MO\x03\x02\x02\x02NH\x03\x02" +
		"\x02\x02NI\x03\x02\x02\x02OR\x03\x02\x02\x02PN\x03\x02\x02\x02PQ\x03\x02" +
		"\x02\x02QS\x03\x02\x02\x02RP\x03\x02\x02\x02ST\x07$\x02\x02T\x12\x03\x02" +
		"\x02\x02UV\t\x03\x02\x02V\x14\x03\x02\x02\x02WY\t\x04\x02\x02XW\x03\x02" +
		"\x02\x02XY\x03\x02\x02\x02Y]\x03\x02\x02\x02Z\\\x05\x13\n\x02[Z\x03\x02" +
		"\x02\x02\\_\x03\x02\x02\x02][\x03\x02\x02\x02]^\x03\x02\x02\x02^`\x03" +
		"\x02\x02\x02_]\x03\x02\x02\x02`b\x070\x02\x02ac\x05\x13\n\x02ba\x03\x02" +
		"\x02\x02cd\x03\x02\x02\x02db\x03\x02\x02\x02de\x03\x02\x02\x02en\x03\x02" +
		"\x02\x02fh\x05\x13\n\x02gf\x03\x02\x02\x02hi\x03\x02\x02\x02ig\x03\x02" +
		"\x02\x02ij\x03\x02\x02\x02jk\x03\x02\x02\x02kl\x070\x02\x02ln\x03\x02" +
		"\x02\x02mX\x03\x02\x02\x02mg\x03\x02\x02\x02n\x16\x03\x02\x02\x02oq\t" +
		"\x04\x02\x02po\x03\x02\x02\x02pq\x03\x02\x02\x02qx\x03\x02\x02\x02rt\x05" +
		"\x13\n\x02sr\x03\x02\x02\x02tu\x03\x02\x02\x02us\x03\x02\x02\x02uv\x03" +
		"\x02\x02\x02vy\x03\x02\x02\x02wy\x05\x15\v\x02xs\x03\x02\x02\x02xw\x03" +
		"\x02\x02\x02yz\x03\x02\x02\x02z{\x05\x19\r\x02{\x18\x03\x02\x02\x02|~" +
		"\t\x06\x02\x02}\x7F\t\x04\x02\x02~}\x03\x02\x02\x02~\x7F\x03\x02\x02\x02" +
		"\x7F\x81\x03\x02\x02\x02\x80\x82\x05\x13\n\x02\x81\x80\x03\x02\x02\x02" +
		"\x82\x83\x03\x02\x02\x02\x83\x81\x03\x02\x02\x02\x83\x84\x03\x02\x02\x02" +
		"\x84\x1A\x03\x02\x02\x02\x85\x88\x05\r\x07\x02\x86\x88\x05\x0F\b\x02\x87" +
		"\x85\x03\x02\x02\x02\x87\x86\x03\x02\x02\x02\x88\x90\x03\x02\x02\x02\x89" +
		"\x8C\x05\x1F\x10\x02\x8A\x8D\x05\r\x07\x02\x8B\x8D\x05\x0F\b\x02\x8C\x8A" +
		"\x03\x02\x02\x02\x8C\x8B\x03\x02\x02\x02\x8D\x8F\x03\x02\x02\x02\x8E\x89" +
		"\x03\x02\x02\x02\x8F\x92\x03\x02\x02\x02\x90\x8E\x03\x02\x02\x02\x90\x91" +
		"\x03\x02\x02\x02\x91\x1C\x03\x02\x02\x02\x92\x90\x03\x02\x02\x02\x93\x94" +
		"\x07,\x02\x02\x94\x1E\x03\x02\x02\x02\x95\x97\t\x07\x02\x02\x96\x95\x03" +
		"\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98\x96\x03\x02\x02\x02\x98\x99\x03" +
		"\x02\x02\x02\x99\x9A\x03\x02\x02\x02\x9A\x9B\b\x10\x02\x02\x9B \x03\x02" +
		"\x02\x02\x9C\x9E\x07\x0F\x02\x02\x9D\x9F\x07\f\x02\x02\x9E\x9D\x03\x02" +
		"\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F\xA2\x03\x02\x02\x02\xA0\xA2\x07\f" +
		"\x02\x02\xA1\x9C\x03\x02\x02\x02\xA1\xA0\x03\x02\x02\x02\xA2\xA3\x03\x02" +
		"\x02\x02\xA3\xA4\b\x11\x02\x02\xA4\"\x03\x02\x02\x02\xA5\xA6\x07}\x02" +
		"\x02\xA6$\x03\x02\x02\x02\xA7\xA8\x07\x7F\x02\x02\xA8&\x03\x02\x02\x02" +
		"\x1C\x02(.5<AELNPX]dimpux~\x83\x87\x8C\x90\x98\x9E\xA1\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!AnimationLexer.__ATN) {
			AnimationLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(AnimationLexer._serializedATN));
		}

		return AnimationLexer.__ATN;
	}

}

